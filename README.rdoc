== Say Hi! to API
Current api is designed as a test project for bargains4business

It responds to basic CRUD structure for pages object and few more features, described bellow
It's placed at /api/ path returns data in two modes: JSON and XML

To get data in xml format use %{url}.xml for JSON just use %{url} or %{url}.json


In example to see all pages in json go to:
      http://yourdomain.com/api/pages

== Response structure

Basic view in json:
      { 
        "success": true,
        "message": [],
        "pages": [
          {
            "content": "Content here",
            "created_at": "2012-09-06T15:41:16Z",
            "id": 1,
            "published_on": null,
            "title": "Title1",
            "updated_at": "2012-09-06T15:41:16Z"
          },
          ...
        ]
      }

Basic view in xml mode is following:
      <hash>
        <success type="boolean">true</success>
        <message type="array"/>
        <pages type="array">
          <page>
            <content>Content here</content>
            <created-at type="datetime">2012-09-06T15:41:16Z</created-at>
            <id type="integer">1</id>
            <published-on type="datetime" nil="true"/>
            <title>Title here</title>
            <updated-at type="datetime">2012-09-06T15:41:16Z</updated-at>
          </page>
          ...
        </pages>
      </hash>




== Features

== Show all pages
Path: http://yourdomain.com/api/pages
Shows list of all pages without pagination
Sample respond will be following:
      { 
        "success": true,
        "message": [],
        "pages": [
          {
            "content": "Content here",
            "created_at": "2012-09-06T15:41:16Z",
            "id": 1,
            "published_on": null,
            "title": "Title1",
            "updated_at": "2012-09-06T15:41:16Z"
          },
          ...
        ]
      }
== Show single page
Shows list of pages with single element inside
By example get request to http://yourdomain.com/api/pages/1 returns:
      { 
        "success": true,
        "message": [],
        "pages": [
          {
            "content": "Content here",
            "created_at": "2012-09-06T15:41:16Z",
            "id": 1,
            "published_on": null,
            "title": "Title1",
            "updated_at": "2012-09-06T15:41:16Z"
          },
        ]
      }
== Create page
To create page post params to http://yourdomain.com/api/pages
You need to wrap page attributes inside pages key like this:
  {
    :pages => {
      :content=>'New page content',
      :title=>'New page title'
    }
  }
If page was created you will see response like this:
  { 
    "success": true,
    "message": [],
    "pages": [
      "content": "New page content",
      "created_at": "2012-09-06T15:41:16Z",
      "id": 1,
      "published_on": null,
      "title": "New page title",
      "updated_at": "2012-09-06T15:41:16Z"
    ]
  }
If sommething goes wrong you will see response like this:
  {
    "succcess": false,
    "message": ['Attribute title can not be blank'],
    "pages": []
  }

Warning! You can not save page without title attribute
== Update page
This works preaty same as create feature but you should send a data to:
  http://yourdomain.com/api/pages/[page_id]
Response would be same
== Delete page
To delete page just send DELETE request to http://yourdomain.com/api/pages/[page_id] path
if deletion wass success you will see 
  {"success":true, ...}
== List of published pages
To see list of published pages you need to go to following path
  http://yourdomain.com/api/pages/published
== List of unpublished pages
To see list of unpublished pages you need to go to following path
  http://yourdomain.com/api/pages/unpublished
== Publish page action
To publish page you need to send POST request to 
  http://yourdomain.com/api/pages/[page_id]/publish
And for page with [page_id] published_on attribute will be equal to current date and time

